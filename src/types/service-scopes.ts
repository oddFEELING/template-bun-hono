/**
 * Auto-generated service scope types
 * DO NOT EDIT MANUALLY
 * 
 * Generated by: scripts/generate-service-scopes.js
 * Run: bun run generate:scopes
 */

// ~ ======= Module Names ======= ~
export type ModuleName =
  | "staff"
  | "school";

// ~ ======= Provider Names ======= ~
export type ProviderName =
  | "provider:stripe";

// ~ ======= Combined Service Scope ======= ~
export type ServiceScope = ModuleName | ProviderName;

// ~ ======= Module Registry (for runtime validation) ======= ~
export const MODULES: readonly ModuleName[] = [
  "staff",
  "school",
] as const;

// ~ ======= Provider Registry (for runtime validation) ======= ~
export const PROVIDERS: readonly ProviderName[] = [
  "provider:stripe",
] as const;

// ~ ======= Combined Registry ======= ~
export const SERVICE_SCOPES: readonly ServiceScope[] = [
  ...MODULES,
  ...PROVIDERS,
] as const;

/**
 * Validates if a scope is a valid module
 */
export function isValidModule(scope: string): scope is ModuleName {
  return MODULES.includes(scope as ModuleName);
}

/**
 * Validates if a scope is a valid provider
 */
export function isValidProvider(scope: string): scope is ProviderName {
  return PROVIDERS.includes(scope as ProviderName);
}

/**
 * Validates if a scope is valid (module or provider)
 */
export function isValidScope(scope: string): scope is ServiceScope {
  return SERVICE_SCOPES.includes(scope as ServiceScope);
}

/**
 * Gets a list of all invalid scopes from an array
 */
export function getInvalidScopes(scopes: string[]): string[] {
  return scopes.filter((scope) => !isValidScope(scope));
}
