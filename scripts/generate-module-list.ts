#!/usr/bin/env bun

import {
  existsSync,
  mkdirSync,
  readdirSync,
  statSync,
  writeFileSync,
} from "fs";
import { join, resolve } from "path";

/**
 * Generates a type-safe list of all modules and providers in the application
 * This is used to validate the exposeTo field in the @Service decorator
 */

const projectRoot = resolve(import.meta.dir, "..");
const modulesDir = join(projectRoot, "src", "modules");
const providersDir = join(projectRoot, "src", "providers");
const outputDir = join(projectRoot, "src", "_generated");
const outputFile = join(outputDir, "modules.ts");

/**
 * Scans a directory and returns all subdirectory names
 */
function getDirectories(path: string): string[] {
  if (!existsSync(path)) {
    return [];
  }

  try {
    return readdirSync(path)
      .filter((item) => {
        const fullPath = join(path, item);
        return statSync(fullPath).isDirectory() && !item.startsWith(".");
      })
      .filter((item) => item !== "app"); // Exclude app module (it's special)
  } catch (error) {
    console.error(`Error reading directory ${path}:`, error);
    return [];
  }
}

/**
 * Generates the module list TypeScript file
 */
function generateModuleList() {
  console.log("🔍 Scanning for modules and providers...");

  // Get all modules
  const modules = getDirectories(modulesDir);
  console.log(`   Found ${modules.length} modules:`, modules.join(", "));

  // Get all providers
  const providers = getDirectories(providersDir).map((p) => `provider:${p}`);
  console.log(
    `   Found ${providers.length} providers:`,
    providers.map((p) => p.replace("provider:", "")).join(", ")
  );

  // Combine all valid module identifiers
  const allModules = [...modules, ...providers];

  // Generate TypeScript content
  const content = `/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 * Generated by: scripts/generate-module-list.ts
 * Generated at: ${new Date().toISOString()}
 * 
 * This file contains type-safe lists of all modules and providers
 * in the application. Used to validate @Service exposeTo fields.
 */

/**
 * List of all available modules (excluding app module)
 */
export const AVAILABLE_MODULES = [
${modules.map((m) => `  "${m}",`).join("\n")}
] as const;

/**
 * List of all available providers (prefixed with 'provider:')
 */
export const AVAILABLE_PROVIDERS = [
${providers.map((p) => `  "${p}",`).join("\n")}
] as const;

/**
 * Combined list of all valid module identifiers
 * Can be used in @Service exposeTo field
 */
export const ALL_MODULES = [
${allModules.map((m) => `  "${m}",`).join("\n")}
] as const;

/**
 * Type-safe module identifier
 */
export type ModuleIdentifier = typeof ALL_MODULES[number];

/**
 * Validates if a module identifier is valid
 */
export function isValidModule(identifier: string): identifier is ModuleIdentifier {
  return ALL_MODULES.includes(identifier as ModuleIdentifier);
}

/**
 * Validates an array of module identifiers
 * Returns invalid identifiers
 */
export function validateModules(identifiers: string[]): string[] {
  return identifiers.filter((id) => !isValidModule(id));
}
`;

  // Ensure output directory exists
  if (!existsSync(outputDir)) {
    mkdirSync(outputDir, { recursive: true });
  }

  // Write the file
  writeFileSync(outputFile, content, "utf-8");
  console.log(`✅ Generated module list at: src/_generated/modules.ts`);
  console.log(`   Total modules: ${allModules.length}`);
}

// Generate on script execution
generateModuleList();

export { generateModuleList };
